incarnation: protelis

network-model:
  type: ConnectWithinDistance
  parameters: [0.5]

gradient: &gradient
  - time-distribution:
      type: ExponentialTime
      parameters: [1]
    # Writing Protelis programs within a YAML file is a bad experience
    # (some characters need escaping, no syntax highlight, no code suggestions...)
    # We recommend using the Protelis Eclipse plugin to write your code, then
    # Loading the code as a module within Alchemist
    # In order to run this example, make sure that src/main/protelis is part of
    # your classpath (the Gradle script is already properly configured).
    type: ChemicalReaction
    conditions:
      - type: OnAnyNeighborhoodChange
        parameters: [1]
    actions:
      - type: TimeFluidProtelisProgram
        parameters:
          - gradient:
              program: org:protelis:tutorial:distanceTo
              reactsToNewInformation: false
              reactsToSelfState: false
#              retentionTime: 10
            neighbor_sensor:
              program: |
                let neighs = foldUnion([nbr(self.getDeviceUID())])
                rep(x <- [[], []]) { [x.get(1), neighs] }.get(0) != neighs
              reactsToNewInformation: false
              reactsToSelfState: false
            position_sensor:
              program: |
                let neighs = foldUnion([nbr(self.getDevicePosition())])
                let previous = rep(x <- [[], []]) { [x.get(1), neighs] }.get(0)
                if (neighs.size() != previous.size()) {
                  true
                } else {
                  let differences = neighs.zip(previous)
                    .map { it.get(0).distanceTo(it.get(1)) }
                  env.put("differences", differences)
                  let threshold = optionally(env.get("distanceThreshold")).orElse(0)
                  !differences.filter { it > threshold }.isEmpty()
                }
              reactsToNewInformation: false
              reactsToSelfState: false
#              retentionTime: 10
            self_sensor:
              program: |
                env.put("LASTEVAL", self.getCurrentTime())
                let gradient = optionally(env.get("org:protelis:tutorial:distanceTo")).orElse(NaN)
                let surrounding = foldUnion([nbr(gradient)])
                env.put("surrounding", surrounding)
                let previous = rep(x <- [[], []]) { [x.get(1), surrounding] }.get(0)
                if (surrounding.size() != previous.size()) {
                  true
                } else {
                  let differences = surrounding.zip(previous)
                    .map { abs(it.get(0) - it.get(1)) }
                  env.put("differences-grad", differences)
                  let threshold = optionally(env.get("distanceThreshold")).orElse(0)
                  !differences.filter { it > threshold }.isEmpty()
                }
              reactsToNewInformation: false
              reactsToSelfState: false
            #              retentionTime: 10
            neighbor_sensor_to_gradient:
              from: neighbor_sensor
              to: gradient
              program: env.get("neighbor_sensor")
            position_sensor_to_gradient:
              from: position_sensor
              to: gradient
              program: env.get("position_sensor")
            self_arc:
              from: self_sensor
              to: gradient
              program: env.get("self_sensor")

displacements:
  - in:
      type: Grid
      parameters: [-5, -5, 5, 5, 0.25, 0.25, 0.1, 0.1]
    contents:
      - in:
          type: Rectangle
          parameters: [-6, -6, 2, 2]
        molecule: source
        concentration: true
      - molecule: distanceThreshold
        concentration: 0.01
    programs:
      - *gradient
