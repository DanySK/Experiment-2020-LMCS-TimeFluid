incarnation: protelis

network-model:
  type: ConnectWithinDistance
  parameters: [1]

variables:
  seed: &seed
    min: 0
    max: 9
    step: 1
    default: 0
  speed: &speed
    type: ArbitraryVariable
    parameters: [0.3, [0, 0.1, 0.3, 1, 3]]
  latencies:
    formula: "[0.01, 0.03, 0.1, 0.3, 1]"
  tolerances:
    formula: "[0, 0.01, 0.03, 0.1, 0.3, 1, 3]"
  controlParameters: &control
    formula: "[[Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY]] + GroovyCollections.combinations(latencies, tolerances)"
  algorithm:
    type: ArbitraryVariable
    parameters: [[0.01, 0], *control]
  classic_frequency: &classic_frequency
    formula: if (network_mean_latency > 10 && tolerance > 10) 1 else 0
  network_mean_latency: &network_mean_latency
    formula: algorithm[0]
  tolerance: &tolerance
    formula: algorithm[1]

seed:
  scenario: *seed
  simulation: *seed

_target_computation: &target_computation |
  module movetarget
  let start = [-5, 5]
  let end = [5, 5]
  let current = self.getCoordinates()
  let forward = rep(x <- true) { x && current != end || !x && current == start }
  if (forward) { end } else { start }

move: &move
  - time-distribution: 10
    type: Event
    actions:
      - type: RunProtelisProgram
        parameters: [*target_computation]
      - type: MoveToTarget
        parameters: ["movetarget", *speed]

gradient: &gradient
  - time-distribution: *classic_frequency
    program: org:protelis:tutorial:distanceTo2
  - program: send
  - program: |
      module oracleRunner
      import DistanceOracle.*
      injectDistanceEverywhere()
      let oracle = env.get("oracle-source")
      let local = optionally(env.get("org:protelis:tutorial:distanceTo"))
        .or(optionally(env.get("org:protelis:tutorial:distanceTo2")))
        .orElse(POSITIVE_INFINITY)
      let error = if (oracle.isInfinite() && local.isInfinite()) { 0 } else { abs(oracle - local) }
      env.put("error", error)
      env.put("coverage", isFinite(error))
    time-distribution:
      type: DiracComb
      parameters: [5]
  - time-distribution:
      type: AnyRealDistribution
      parameters: [WeibullDistribution, 1, *network_mean_latency]
    type: ChemicalReaction
    conditions:
      - type: OnAnyNeighborhoodChange
        parameters: [1]
    actions:
      - type: TimeFluidProtelisProgram
        parameters:
          - gradient:
              program: org:protelis:tutorial:distanceTo
              reactsToNewInformation: false
              reactsToSelfState: false
#              retentionTime: 10
            neighbor_sensor:
              program: |
                let neighs = foldUnion([nbr(self.getDeviceUID())])
                rep(x <- [[], []]) { [x.get(1), neighs] }.get(0) != neighs
              reactsToNewInformation: false
              reactsToSelfState: false
            position_sensor:
              program: |
                let newPosition = self.getDevicePosition()
                rep(state <- [newPosition, true]) {
                  let oldPosition = state.get(0)
                  if (oldPosition.distanceTo(newPosition) > optionally(env.get("distanceThreshold")).orElse(0)) {
                    [newPosition, true]
                  } else {
                    [oldPosition, false]
                  }
                }.get(1)
              reactsToNewInformation: false
              reactsToSelfState: false
#              retentionTime: 10
            self_sensor:
              program: |
                let gradient = optionally(env.get("org:protelis:tutorial:distanceTo")).orElse(NaN)
                let surrounding = foldUnion([nbr(gradient)])
                env.put("surrounding", surrounding)
                let previous = rep(x <- [[], []]) { [x.get(1), surrounding] }.get(0)
                if (surrounding.size() != previous.size()) {
                  true
                } else {
                  let differences = surrounding.zip(previous)
                    .map { abs(it.get(0) - it.get(1)) }
                  env.put("differences-grad", differences)
                  let threshold = optionally(env.get("distanceThreshold")).orElse(0)
                  !differences.filter { it > threshold }.isEmpty()
                }
              reactsToNewInformation: false
              reactsToSelfState: false
            #              retentionTime: 10
            neighbor_sensor_to_gradient:
              from: neighbor_sensor
              to: gradient
              program: env.get("neighbor_sensor")
            position_sensor_to_gradient:
              from: position_sensor
              to: gradient
              program: env.get("position_sensor")
            self_arc:
              from: self_sensor
              to: gradient
              program: env.get("self_sensor")

displacements:
  - in:
      type: Point
      parameters: [-5, 5]
    contents:
      - molecule: source
        concentration: true
      - molecule: distanceThreshold
        concentration: *tolerance
    programs:
      - *gradient
      - *move
  - in:
      type: Grid
      parameters: [-5.5, -5.5, 5, 5, 0.5, 0.5, 0.1, 0.1]
    contents:
      - in:
          type: Rectangle
          parameters: [-6, -6, 2, 2]
        molecule: source
        concentration: true
      - molecule: distanceThreshold
        concentration: *tolerance
    programs:
      - *gradient

export:
  - time
  - molecule: error
    value-filter: onlyfinite
    aggregators: [mean]
  - molecule: coverage
    value-filter: onlyfinite
    aggregators: [mean]
  - molecule: rounds
    value-filter: onlyfinite
    aggregators: [sum, mean, max, min, StandardDeviation, GeometricMean]

terminate:
  - type: AfterTime
    parameters: [300]
